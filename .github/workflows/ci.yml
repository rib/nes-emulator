name: CI

on: [pull_request]

env:
  RUST_BACKTRACE: 1
  RUST_VERSION: 1.64

jobs:
  # Check code formatting.
  fmt:
    name: Rustfmt
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true
      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Static analyzer.
  clippy:
    name: Clippy
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          profile: minimal
          override: true
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all --tests --all-features -- -D warnings

  # Security audit.
  audit:
    name: Security audit
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Tests.
  test:
    name: ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- build: Linux
          #  os: ubuntu-latest
          #- build: macOS
          #  os: macOS-latest
          - build: Windows
            os: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Build Emulator
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path nes-emulator-ui/Cargo.toml
      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: Emulator ROM Tests
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --profile=realtime -- -d roms/nes-test-roms -m tests/tests.json -p all -q --results results.json
      - uses: actions/upload-artifact@v2
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results
          path: results.json
